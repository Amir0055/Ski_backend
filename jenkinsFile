pipeline {
    agent any
    stages {
        stage('Checkout from Git') {
            steps {
                echo "Checking out code from Git"
                // Replace the repository URL with your actual Git repository URL
                git 'https://github.com/Amir0055/Ski_backend'
            }
        }

        stage('Build Artifact') {
            steps {
                echo "Building artifact"
                sh 'mvn clean install'
            }
        }

        stage('Run Unit Tests') {
            steps {
                echo "Running unit tests"
                sh 'mvn test'
            }
        }

        stage('Run Code Quality Analysis') {
            steps {
                echo "Running SonarQube analysis"
                sh 'mvn sonar:sonar -Dsonar.login=admin -Dsonar.password=sonar -Dsonar.host.url=http://192.168.1.3:9000'
            }
        }

        stage('Deploy to Nexus') {
            steps {
                echo "Deploying to Nexus"
                sh 'mvn deploy -DskipTests'
            }
        }

        stage('Build Spring Image') {
            steps {
                echo "Building Spring Docker image"
                sh 'docker build -t zoutchi/gestion-station-ski-1.0 .'
            }
        }

        stage('Push Image to DockerHub') {
            steps {
                echo "Pushing Docker image to DockerHub"
                sh 'docker login -u zoutchi -p zoutsh032003'
                sh 'docker push zoutchi/gestion-station-ski-1.0'
            }
        }

        stage('Run Docker Compose') {
            steps {
                echo "Running Docker Compose"
                sh 'docker-compose up -d'
            }
        }

        stage('Test Services with Postman or Swagger') {
            steps {
                echo "Testing services with Postman or Swagger"
                // Add commands to test your services with Postman or Swagger
            }
        }

        stage('Monitoring with Prometheus and Grafana') {
            steps {
                echo "Monitoring with Prometheus and Grafana"
                // Add commands to set up monitoring using Prometheus and Grafana
            }
        }
    }

    post {
        always {
            echo "Cleaning up"
            // Add cleanup steps if needed
        }
    }
}



/* pipeline {
    agent any
    stages {
        stage("Testing Maven") {
            steps {
                sh "mvn -version"
            }
        }
        stage("Testing JDK") {
            steps {
                sh "java -version"
            }
        }
        stage("Checkout Git") {
            steps {
                echo "Pulling"
            }
        }
        stage('Build and Analyze Code') {
            steps {
                script {
                    // Compilation Maven
                    sh 'mvn compile'

                    // Analyse SonarQube
                    sh 'mvn sonar:sonar -Dsonar.login=admin -Dsonar.password=sonar -Dsonar.host.url=http://192.168.1.3:9000'
                }
            }
        }
        stage('Deploy to Nexus') {
            steps {
                sh 'mvn deploy -DskipTests'
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                script {
                    sh 'docker build -t zoutchi/gestion-station-ski-1.0 .'
                    sh 'docker login -u zoutchi -p zoutsh032003'
                    sh 'docker push zoutchi/gestion-station-ski-1.0'
                }
            }
        }
        stage('Verify Docker Compose Installation') {
            steps {
                sh 'docker compose version'
            }
        }
        stage('Start and Check Docker Compose') {
            steps {
                script {
                    // Vérifier et démarrer Docker Compose
                    sh 'docker compose up -d'
                    sh 'docker compose ps'
                }
            }
        }
    }
}
*/
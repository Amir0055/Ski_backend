pipeline {
    agent any
    stages {
        stage('Checkout from Git') {
            steps {
                echo "Checking out code from Git"
                echo "Pulling"
            }
        }

        stage('Build Artifact') {
            steps {
                echo "Building artifact"
                sh 'mvn clean install'
            }
        }

        stage('Run Unit Tests') {
            steps {
                echo "Running unit tests"
                sh 'mvn test'
            }
        }

        stage('Run Code Quality Analysis') {
            steps {
                echo "Running SonarQube analysis"
                sh 'mvn sonar:sonar -Dsonar.login=admin -Dsonar.password=sonar -Dsonar.host.url=http://192.168.1.3:9000'
            }
        }

        stage('Deploy to Nexus') {
            steps {
                echo "Deploying to Nexus"
                sh 'mvn deploy -DskipTests'
            }
        }

        stage('Build Spring Image') {
            steps {
                echo "Building Spring Docker image"
                sh 'docker build -t zoutchi/gestion-station-ski-1.0 .'
            }
        }

        stage('Push Image to DockerHub') {
            steps {
                echo "Pushing Docker image to DockerHub"
                sh 'docker login -u zoutchi -p zoutsh032003'
                sh 'docker push zoutchi/gestion-station-ski-1.0'
            }
        }

        stage('Run Docker Compose') {
    steps {
        echo "Running Docker Compose"
        sh 'docker-compose up -d'

        echo "Waiting for Docker containers to start"
        sh 'sleep 30'
    }
}

        stage('Test Services with Swagger') {
            steps {
                echo "Testing services with Swagger"

                // Exemple de test d'ajout d'abonnement
                sh 'curl -X POST -H "Content-Type: application/json" -d \'{level": 0,"typeCourse": "COLLECTIVE_CHILDREN","support": "SKI","price": 0,"timeSlot": 0}\' http://192.168.1.3:8089/api/course/add'

                // Exemple de test de récupération d'un abonnement par ID

                sh 'curl http://192.168.1.3:8089/api/course/all'
            }
        }


      stage('Monitoring with Prometheus and Grafana') {
            environment {
                GRAFANA_URL = "http://admin:grafana@192.168.1.3:3000"
            }
            steps {
                echo "Monitoring with Prometheus and Grafana"

                script {
                    def dataSourceExists = sh(script: "curl -s -o /dev/null -w '%{http_code}' ${GRAFANA_URL}/api/datasources/name/Prometheus", returnStatus: true) == 200

                    if (!dataSourceExists) {
                        echo "Prometheus data source does not exist in Grafana. Creating..."
                        sh "curl -X POST -H 'Content-Type: application/json' -d '{\"name\":\"Prometheus1\",\"type\":\"prometheus\",\"url\":\"http://192.168.1.3:9090\",\"access\":\"proxy\"}' ${GRAFANA_URL}/api/datasources"
                    } else {
                        echo "Prometheus data source already exists in Grafana"
                    }
                }

                // Import Grafana dashboard for Spring Boot Actuator metrics (customize the URL)
                sh 'curl -X POST -H "Content-Type: application/json" -d "{\"dashboard\": \"https://grafana.com/api/dashboards/6756/revisions/2/download\",\"inputs\": [{\"name\": \"DS_PROMETHEUS\", \"type\": \"datasource\", \"pluginId\": \"prometheus\", \"value\": \"Prometheus\"}] }" ${GRAFANA_URL}/api/dashboards/import'
            }
        }




    }

    post {
        always {
            emailext(
                    subject: "Pipline Status: ${BUILD_NUMBER}",
                    body: '''<html>
                                <body>
                                        <p>Build Status: ${BUILD_STATUS}</p>
                                        <p>Build number: ${BUILD_NUMBER}</p>
                                        <p>Check the <a href="${BUILD_URL}">console output</a>.</p>
                                </body>
                            </html>''',
                    to:'sbaih238@gmail.com',
                    from: 'jenkins@example.com',
                    replyTo: 'jenkins@example.com',
                    mimeType:'text/html'
    )
    }
    }
}



/* pipeline {
    agent any
    stages {
        stage("Testing Maven") {
            steps {
                sh "mvn -version"
            }
        }
        stage("Testing JDK") {
            steps {
                sh "java -version"
            }
        }
        stage("Checkout Git") {
            steps {
                echo "Pulling"
            }
        }
        stage('Build and Analyze Code') {
            steps {
                script {
                    // Compilation Maven
                    sh 'mvn compile'

                    // Analyse SonarQube
                    sh 'mvn sonar:sonar -Dsonar.login=admin -Dsonar.password=sonar -Dsonar.host.url=http://192.168.1.3:9000'
                }
            }
        }
        stage('Deploy to Nexus') {
            steps {
                sh 'mvn deploy -DskipTests'
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                script {
                    sh 'docker build -t zoutchi/gestion-station-ski-1.0 .'
                    sh 'docker login -u zoutchi -p zoutsh032003'
                    sh 'docker push zoutchi/gestion-station-ski-1.0'
                }
            }
        }
        stage('Verify Docker Compose Installation') {
            steps {
                sh 'docker compose version'
            }
        }
        stage('Start and Check Docker Compose') {
            steps {
                script {
                    // Vérifier et démarrer Docker Compose
                    sh 'docker compose up -d'
                    sh 'docker compose ps'
                }
            }
        }
    }
}
*/
